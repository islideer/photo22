datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Images {
  id               Int                @id @default(autoincrement())
  url              String?            @db.Text
  preview_url      String?            @db.Text
  exif             Json?              @db.Json
  labels           Json?              @db.Json
  width            Int                @default(0)
  height           Int                @default(0)
  lon              String?
  lat              String?
  detail           String?            @db.Text
  show             Int                @default(1) @db.SmallInt
  sort             Int                @default(0) @db.SmallInt
  create_time      DateTime?          @default(now()) @db.Timestamp()
  update_time      DateTime?          @db.Timestamp()
  del              Int                @default(0) @db.SmallInt
  imageTagRelation ImageTagRelation[]
}

model Configs {
  id           Int       @id @default(autoincrement())
  config_key   String    @unique
  config_value String?   @db.Text
  detail       String?   @db.Text
  create_time  DateTime? @default(now()) @db.Timestamp()
  update_time  DateTime? @db.Timestamp()
}

model Tags {
  id               Int                @id @default(autoincrement())
  name             String
  tag_value        String             @unique
  detail           String?            @db.Text
  show             Int                @default(1) @db.SmallInt
  sort             Int                @default(0) @db.SmallInt
  create_time      DateTime?          @default(now()) @db.Timestamp()
  update_time      DateTime?          @db.Timestamp()
  del              Int                @default(0) @db.SmallInt
  imageTagRelation ImageTagRelation[]
}

model ImageTagRelation {
  tag       Tags   @relation(fields: [tag_value], references: [tag_value])
  tag_value String
  image     Images @relation(fields: [imageId], references: [id])
  imageId   Int

  @@id([imageId, tag_value])
}
